/*
 * This file is part of the 600mm narrow gauge Set.
 * 600mm narrow gauge Set is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version 2 or - upon your discretion - any later version.
 * 600mm narrow gauge Set is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with 600mm narrow gauge Set. If not, see <http://www.gnu.org/licenses/>.
 */

grf {
	grfid: "MC\02\11";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESCRIPTION);
	version: 27;
	min_compatible_version: 27;
    param {
        param_purchase_cost {
            type:   int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name:   string(STR_PARAM_NAME_PURCHASE_COST);
            desc:   string(STR_PARAM_DESC_PURCHASE_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_running_cost {
            type:   int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name:   string(STR_PARAM_NAME_RUNNING_COST);
            desc:   string(STR_PARAM_DESC_RUNNING_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_build_cost {
            type:   int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name:   string(STR_PARAM_NAME_BUILD_COST);
            desc:   string(STR_PARAM_DESC_BUILD_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_infra_cost {
            type:   int;
            min_value: 0;
            max_value: 2;
            def_value: 1;
            name:   string(STR_PARAM_NAME_INFRA_COST);
            desc:   string(STR_PARAM_DESC_INFRA_COST);
            names: {
                        0: string(STR_PARAM_COST_H);
                        1: string(STR_PARAM_COST_N);
                        2: string(STR_PARAM_COST_D);
            };
        }
    }
    param {
        param_keep_old_vehs {
            type: bool;
            name: string(STR_PARAM_NAME_KEEP_OLD_VEHS);
            desc: string(STR_PARAM_DESC_KEEP_OLD_VEHS);
        }
    }
    param {
        param_disable_attach {
            type: bool;
            name: string(STR_PARAM_NAME_FORBID_ATTACH);
            desc: string(STR_PARAM_DESC_FORBID_ATTACH);
        }
    }
    param {
        param_enable_electric {
            type: bool;
            name: string(STR_PARAM_NAME_ENABLE_ELECTRIC);
            desc: string(STR_PARAM_DESC_ENABLE_ELECTRIC);
	    def_value: 1;
        }
    }
}

//train_width_32_px = 1;
traininfo_y_offset = 2;

basecost {
    PR_BUILD_VEHICLE_TRAIN: param_purchase_cost - 4;
    PR_RUNNING_TRAIN_STEAM: param_running_cost - 3;
    PR_RUNNING_TRAIN_DIESEL: param_running_cost - 3;
    PR_RUNNING_TRAIN_ELECTRIC: param_running_cost - 3;
//    PR_BUILD_RAIL: param_build_cost - 5;
//    PR_MAINTENANCE_RAIL: param_infra_cost - 2;
//    PR_BUILD_DEPOT_TRAIN: - 4;
}
/*
basecost {
    PR_BUILD_VEHICLE_ROAD:     param_purchase_cost+2; //default double base give normal costs
    PR_RUNNING_ROADVEH:        param_running_cost+1; //default double base give normal costs
}
*/

